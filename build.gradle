allprojects {
    apply plugin: 'cpp'
}

model {
    repositories {
        libs(PrebuiltLibraries) {
            def boostDir = "/usr/local/Cellar/boost/1.65.1"
            def boostIncludeDir = "$boostDir/include"
            def boostLibraryDir = "$boostDir/lib"

            assert new File(boostDir).exists()
            boostAsio {
                headers.srcDir boostIncludeDir
            }
            boostSystem {
                headers.srcDir boostIncludeDir
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("$boostLibraryDir/libboost_system.a")
                }
            }
        }
    }
}

subprojects {
    model {
        binaries {
            all {
                cppCompiler.args '-std=c++11'
                lib project: ':', library: 'boostAsio', linkage: 'api'
            }
        }
    }

    model {
        components {
            if (path.startsWith(':client-') || path.startsWith(':server-')) {
                main(NativeLibrarySpec) {
                    binaries.all {
                        lib project: ':common', library: 'main', linkage: 'api'
                        lib project: ':', library: 'boostAsio', linkage: 'api'
                        lib project: ':', library: 'boostSystem', linkage: 'static'
                    }
                }
            }
        }
    }
}

project(':common') {
    model {
        components {
            main(NativeLibrarySpec) {
                binaries.all {
                    lib project: ':', library: 'boostAsio', linkage: 'api'
                    lib project: ':', library: 'boostSystem', linkage: 'static'
                }
            }
        }
    }
}

